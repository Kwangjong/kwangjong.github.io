<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-21T16:36:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">KJ Choi</title><subtitle>under construction</subtitle><author><name>KJ Choi</name><email>choikj0903@gmail.com</email></author><entry><title type="html">ComputerScienceCheatSheet</title><link href="http://localhost:4000/2022/02/27/cscheatsheet/" rel="alternate" type="text/html" title="ComputerScienceCheatSheet" /><published>2022-02-27T16:32:00+09:00</published><updated>2022-02-27T16:32:00+09:00</updated><id>http://localhost:4000/2022/02/27/cscheatsheet</id><content type="html" xml:base="http://localhost:4000/2022/02/27/cscheatsheet/">&lt;h1 id=&quot;computersciencecheatsheet&quot;&gt;ComputerScienceCheatSheet&lt;/h1&gt;
&lt;p&gt;a quick guide and study notes for basic algorithms, datastructure, and etc. basically, my summary for core comp sci classes i tooked at the college.
Python is used for the example codes.&lt;/p&gt;

&lt;h1 id=&quot;author&quot;&gt;Author&lt;/h1&gt;
&lt;p&gt;me. – If you find any mistakes (syntax, logic, or grammar), criticisms are always welcomed! Feel free to reach out to me here: choikj0903@gmail.com&lt;/p&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of Content&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#programming-basics&quot;&gt;Programming Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-structure-basics&quot;&gt;Data Structure Basics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#array--list&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linked-list&quot;&gt;Linked List&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stack&quot;&gt;Stack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#queue&quot;&gt;Queue&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tree&quot;&gt;Tree&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#binary-tree&quot;&gt;Binary Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#binary-search-tree&quot;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#algorithm-basics&quot;&gt;Algorithm Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#search-algorithms&quot;&gt;Search Algorithms&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#linear-search--sequential-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#binary-search&quot;&gt;Binary Search&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sorting-algorithms&quot;&gt;Sorting Algorithms&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#selection-sort&quot;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#insertion-sort&quot;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#quick-sort&quot;&gt;Quick Sort&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#others&quot;&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;programming-basics&quot;&gt;Programming Basics&lt;/h1&gt;

&lt;h2 id=&quot;data-structure-basics&quot;&gt;Data Structure Basics&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Data Structure&lt;/em&gt;&lt;/strong&gt; is a way of organizing data in a computer efficiently. Different data structures are used according to the purpose so that a computer can effectively load and store data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Abstract Data Type (ADT)&lt;/em&gt;&lt;/strong&gt; is a data type described by pre-defined using user operation such as “insert data at the rear”. &lt;strong&gt;&lt;em&gt;ADT&lt;/em&gt;&lt;/strong&gt; only provides what operations are defined, not how the operations are implemented. For example, &lt;strong&gt;&lt;em&gt;Stack&lt;/em&gt;&lt;/strong&gt; is a &lt;strong&gt;&lt;em&gt;abstract data type&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;Stack&lt;/em&gt;&lt;/strong&gt; is defined by &lt;strong&gt;&lt;em&gt;push()&lt;/em&gt;&lt;/strong&gt; which inserts an element at the top of the stack and &lt;strong&gt;&lt;em&gt;pop()&lt;/em&gt;&lt;/strong&gt; which gets top-most element out of the stack.&lt;/p&gt;

&lt;h2 id=&quot;array--list&quot;&gt;Array / List&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Array&lt;/em&gt;&lt;/strong&gt; stores data in sequential order. Each element can be accessed using an &lt;strong&gt;&lt;em&gt;index&lt;/em&gt;&lt;/strong&gt; usually starting from 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/array.png&quot; alt=&quot;array&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time Complexity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Indexing: O(1)&lt;/li&gt;
  &lt;li&gt;Search: O(n) / O(log n)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linked-list&quot;&gt;Linked List&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Linked List&lt;/em&gt;&lt;/strong&gt; is a series of entries that stores the value and a pointer to the next entry. Each entry is called &lt;strong&gt;&lt;em&gt;Node&lt;/em&gt;&lt;/strong&gt;. Physical placement of the &lt;strong&gt;&lt;em&gt;Nodes&lt;/em&gt;&lt;/strong&gt; does not have to be sequential.&lt;/p&gt;

&lt;p&gt;Time Complexity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Indexing: &lt;strong&gt;O(n)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Append/Prepend: &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Delete: &lt;strong&gt;O(n)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/linked-list.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/middle-of-linked-list.py&quot;&gt;Getting middle element of a LinkedList with unknown length&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Singly Linked List&lt;/em&gt;&lt;/strong&gt;: each Node has only one pointer pointing to the next Node. Can only traverse in one direction.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Doubly Linked List&lt;/em&gt;&lt;/strong&gt;: each Node has two pointers: one pointing to the next Node, another pointing to the previous Node. Can traverse in both directions.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Circular Linked List&lt;/em&gt;&lt;/strong&gt;: “last” node of the list points to the “first” node of the list. Can traverse the list infinitely looping around the list.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/linked-list.png&quot; alt=&quot;linked-list&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stack&quot;&gt;Stack&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stack&lt;/em&gt;&lt;/strong&gt; is an ADT that is described by Last-In-Fist-Out(LIFO) behavior. It can be implemented using both &lt;strong&gt;&lt;em&gt;Array&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;Linked List&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;push()&lt;/em&gt;&lt;/strong&gt;: insert an element at the top of the stack&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;pop()&lt;/em&gt;&lt;/strong&gt;: return and remove an element at the top of the stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/stack.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/max-stack.py&quot;&gt;Tracking maximum of a stack&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;queue&quot;&gt;Queue&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Queue&lt;/em&gt;&lt;/strong&gt; is an ADT that is described by First-In-First-Out(FIFO) behavior. It can be implemented using both &lt;strong&gt;&lt;em&gt;Array&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;Linked List&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;enque()&lt;/em&gt;&lt;/strong&gt;: insert an element at the end of the queue&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;deque()&lt;/em&gt;&lt;/strong&gt;: return and remove an element at the head of queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/queue.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hashtable--hashmap&quot;&gt;HashTable / HashMap&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hash table&lt;/em&gt;&lt;/strong&gt; is a data structure that stores unordered items by mapping (or hashing) each item to a location in an array (or vector). It maps a unique &lt;strong&gt;&lt;em&gt;key&lt;/em&gt;&lt;/strong&gt; to an index using a &lt;strong&gt;&lt;em&gt;hash function&lt;/em&gt;&lt;/strong&gt;. Each hash table array element is called &lt;strong&gt;&lt;em&gt;bucket&lt;/em&gt;&lt;/strong&gt;. A common example of a &lt;strong&gt;&lt;em&gt;hash function&lt;/em&gt;&lt;/strong&gt; uses the modulo operator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/hash-table.png&quot; alt=&quot;hash-table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time Complexity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Indexing: &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Search: &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Insert: &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Collision handling&lt;/em&gt;&lt;/strong&gt;: Collision occurs when a &lt;strong&gt;&lt;em&gt;hash function&lt;/em&gt;&lt;/strong&gt; returns the same outputs for distinct keys.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Chaining&lt;/em&gt;&lt;/strong&gt;: a technique where each bucket has a list of items.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Open Addressing&lt;/em&gt;&lt;/strong&gt;: a technique where collisions are resolved by looking for an empty bucket elsewhere in the table.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;Linear Probing&lt;/em&gt;&lt;/strong&gt;: handles collision by linearly searching the bucket starting from the key’s mapped bucket.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;Quadratic Probing&lt;/em&gt;&lt;/strong&gt;: handles collision by quadratically searches the bucket starting frolm the key’s mapped bucket. &lt;br /&gt;
   f(i) = (H + c1 * i + c2 * i&lt;sup&gt;2&lt;/sup&gt;) % (&lt;em&gt;tablesize&lt;/em&gt;), where H is the inital bucket, c1 and c2 is a programmer-defined constants.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;Double hashing&lt;/em&gt;&lt;/strong&gt;: uses two hash functions to compute bucket indices. f(i)=(h1(key) + h2(key) * i) % (tablesize).
Iterating through a sequential &lt;em&gt;i&lt;/em&gt; values to obtain the desired table is called &lt;strong&gt;&lt;em&gt;probing sequence&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tree&quot;&gt;Tree&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tree&lt;/em&gt;&lt;/strong&gt; is an ADT that simulates hiearchial structure by a set of linked nodes. Each Node stores its value and sets of its “child” nodes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/tree-1.png&quot; alt=&quot;tree&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Parent and Child Node&lt;/em&gt;&lt;/strong&gt;: A link between the nodes in the tree are described with a parent-child relationship. If Node ‘A’ stores pointers to the Node ‘B’. Node ‘A’ is a parent of Node ‘B’, and Node ‘B’ is a child of Node ‘A’.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Root&lt;/em&gt;&lt;/strong&gt;: A node with no parent. There can be only one root node in a tree.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Leaf&lt;/em&gt;&lt;/strong&gt;: a tree node with no children.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Internal node&lt;/em&gt;&lt;/strong&gt;: a node with at least one child.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/tree-2.png&quot; alt=&quot;tree&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Edge&lt;/em&gt;&lt;/strong&gt;: a link from a node to a child&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Depth&lt;/em&gt;&lt;/strong&gt;: the number of edges from the root to the node&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Level&lt;/em&gt;&lt;/strong&gt;: all nodes with the same depth&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Height&lt;/em&gt;&lt;/strong&gt;: the largest depth of any node.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-tree&quot;&gt;Binary Tree&lt;/h3&gt;
&lt;p&gt;In &lt;strong&gt;&lt;em&gt;Binary Tree&lt;/em&gt;&lt;/strong&gt;, each node can only have up to two child nodes (&lt;em&gt;left and right child&lt;/em&gt;).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A binary tree is &lt;strong&gt;&lt;em&gt;full&lt;/em&gt;&lt;/strong&gt; if every node contains 0 or 2 child nodes.&lt;/li&gt;
  &lt;li&gt;A binary tree is &lt;strong&gt;&lt;em&gt;complete&lt;/em&gt;&lt;/strong&gt; if all level, except the last level, are full and all node in the last level are as far left as possible.&lt;/li&gt;
  &lt;li&gt;A binary tree is &lt;strong&gt;&lt;em&gt;perfect&lt;/em&gt;&lt;/strong&gt; if all internal node have 2 child nodes and all leaf nodes are at the same level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/binary-tree.png&quot; alt=&quot;binary-tree&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;binary-search-tree&quot;&gt;Binary Search Tree&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Binary Search Tree&lt;/em&gt;&lt;/strong&gt; is a special type if a binary tree that has an ordering property. All the keys of any nodes’s left subtree are less than the node’s key, and all the keys of any node’s right subtree are greater than the node’s key. This property can make searching a key in the tree fast.&lt;/p&gt;

&lt;p&gt;Time complexity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Insert: &lt;strong&gt;O(h)&lt;/strong&gt;, where h is height of BST.&lt;/li&gt;
  &lt;li&gt;Delete: &lt;strong&gt;O(h)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Searching: &lt;strong&gt;O(h)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!---### Heap

### AVL Tree

### Red-Black BST

### B-trees

traversal
depth first search
-preorder, inorder, postorder
breath first search
-level-order

## Graph---&gt;

&lt;h2 id=&quot;algorithm-basics&quot;&gt;Algorithm Basics&lt;/h2&gt;
&lt;h3 id=&quot;iterative-algorithm&quot;&gt;Iterative Algorithm&lt;/h3&gt;
&lt;p&gt;An algorithm that performs number of steps repeatedly for a finite number of times.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Each repetition is called &lt;strong&gt;&lt;em&gt;iteration&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Uses looping statement like &lt;strong&gt;&lt;em&gt;for&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;while&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Mostly used to move through a data set like an array or a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recursive-algorithm&quot;&gt;Recursive Algorithm&lt;/h3&gt;
&lt;p&gt;An algorithm that calls itself.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Recursive alorithm is divided into two parts: a &lt;strong&gt;&lt;em&gt;recursive case&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;base case&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Recursive case&lt;/em&gt;&lt;/strong&gt; is a condition where a recursion is triggered.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Base case&lt;/em&gt;&lt;/strong&gt; is a condition that stops the recursion and evaluates the result.&lt;/li&gt;
  &lt;li&gt;Often used in Depth First Search&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;search-algorithms&quot;&gt;Search Algorithms&lt;/h2&gt;
&lt;h3 id=&quot;linear-search--sequential-search&quot;&gt;Linear Search / Sequential Search&lt;/h3&gt;
&lt;p&gt;A very simple searching algorithm. It starts from one end checking every element until the desired element is found.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It can be performed in an unsorted list.&lt;/li&gt;
  &lt;li&gt;Time Complexity : &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/linear-search.gif&quot; alt=&quot;linear-search&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;binary-search&quot;&gt;Binary Search&lt;/h3&gt;
&lt;p&gt;A search algorithm that repeatedly divides the search interval in half until the desired element is found or the interval is empty.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It can only be performed in a sorted list.&lt;/li&gt;
  &lt;li&gt;Time Complexity : &lt;strong&gt;O(log n)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/binary-search.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/binary-search.gif&quot; alt=&quot;binary-search&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sorting-algorithms&quot;&gt;Sorting Algorithms&lt;/h2&gt;
&lt;h3 id=&quot;selection-sort&quot;&gt;Selection Sort&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Selection Sort&lt;/em&gt;&lt;/strong&gt; is a comparison based algorithms. It divides the list into a sorted part and an unsorted part, and repeatedly searches the unsorted part and “select” the smallest or greates element to move from the unsorted part to the end of the sorted part.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Optimized for small lists (fewer than 10-20elements).&lt;/li&gt;
  &lt;li&gt;It may require many comparisions for big lists.&lt;/li&gt;
  &lt;li&gt;Time Complexity: &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/selection-sort.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/selection-sort.gif&quot; alt=&quot;selection-sort&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;insertion-sort&quot;&gt;Insertion Sort&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Insertion Sort&lt;/em&gt;&lt;/strong&gt; is a comparision based algorithm that searches the sorted part for the next element in the unsorted list to be “inserted”.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Optimized for small lists (fewer than 10-20elements).&lt;/li&gt;
  &lt;li&gt;It may require many comparisions for big lists.&lt;/li&gt;
  &lt;li&gt;It may require lesser comparision compare to &lt;strong&gt;&lt;em&gt;selection sort&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;Insertion sort&lt;/em&gt;&lt;/strong&gt; only scans as many as it need to place ith element, while &lt;strong&gt;selection sort&lt;/strong&gt;* always scans all elements in the unsorted part. &lt;strong&gt;&lt;em&gt;Insertion sort&lt;/em&gt;&lt;/strong&gt; is typically very efficient for list that are “nearly sorted”.&lt;/li&gt;
  &lt;li&gt;Time Complexity: &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/insertion-sort.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/insertion-sort.gif&quot; alt=&quot;insertion-sort&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;quick-sort&quot;&gt;Quick Sort&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Quick Sort&lt;/em&gt;&lt;/strong&gt; is a divide and conquer algorithm that recursively partitions the input into low and high parts and sorts each of those parts. A &lt;strong&gt;&lt;em&gt;pivot&lt;/em&gt;&lt;/strong&gt; is any value within the array that divide the data into low and high parts. To partition the input, All values in the low partition are less than or equal to the pivot value, and alll the values in the high partition are greater than or equal to the pivot value. The values in each partition are not necessarily sorted.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is fast for the most cases. &lt;strong&gt;O(n log n)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;However, if the pivot selected is the smallest or largest element, it results an uneven partitioning. If uneven partitioning happens at every level the runtime is &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;. This rarely happens.&lt;/li&gt;
  &lt;li&gt;Time Complexity:
    &lt;ul&gt;
      &lt;li&gt;Average: &lt;strong&gt;O(n log n)&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Worst: &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/quick-sort.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/quick-sort.gif&quot; alt=&quot;quick-sort&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Merge Sort&lt;/em&gt;&lt;/strong&gt; is a divide and conquer algorithm that divides a list into two halves, recursively sorts each half and merges the sorted halves. Recursive partitioning happens until only one element is in the partition.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It requires additional memory during merging process.&lt;/li&gt;
  &lt;li&gt;It is not highly affected by the distribution of the array given.&lt;/li&gt;
  &lt;li&gt;Time Complexity: &lt;strong&gt;O(n)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Kwangjong/CSCheatSheet/blob/main/implementation/merge-sort.py&quot;&gt;Implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/merge-sort.gif&quot; alt=&quot;merge-sort&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;h3 id=&quot;minimax&quot;&gt;&lt;a href=&quot;https://github.com/Kwangjong/Unbeatable-TicTacToe#minimax-algorithm&quot;&gt;Minimax&lt;/a&gt;&lt;/h3&gt;</content><author><name>KJ Choi</name><email>choikj0903@gmail.com</email></author><category term="study," /><category term="programming" /><summary type="html">ComputerScienceCheatSheet a quick guide and study notes for basic algorithms, datastructure, and etc. basically, my summary for core comp sci classes i tooked at the college. Python is used for the example codes.</summary></entry><entry><title type="html">Testing MathJax</title><link href="http://localhost:4000/2022/02/05/testing-mathjax/" rel="alternate" type="text/html" title="Testing MathJax" /><published>2022-02-05T16:32:00+09:00</published><updated>2022-02-05T16:32:00+09:00</updated><id>http://localhost:4000/2022/02/05/testing-mathjax</id><content type="html" xml:base="http://localhost:4000/2022/02/05/testing-mathjax/">&lt;p&gt;Not Pure Poole supports &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;. You can enable it on a page by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;math: true&lt;/code&gt; in the front matter.&lt;/p&gt;

&lt;p&gt;An inline math: \(E=mc^2\).&lt;/p&gt;

&lt;p&gt;A display math:&lt;/p&gt;

\[i\hbar \frac{\partial \Psi}{\partial t} = -\frac{\hbar^2}{2m}
\frac{\partial^2 \Psi}{\partial x^2} + V \Psi\]</content><author><name>KJ Choi</name><email>choikj0903@gmail.com</email></author><category term="mathjax" /><summary type="html">Not Pure Poole supports MathJax. You can enable it on a page by setting math: true in the front matter.</summary></entry><entry><title type="html">Releasing Not Pure Poole v0.1.0</title><link href="http://localhost:4000/2022/01/30/releasing-not-pure-poole-v0-1-0/" rel="alternate" type="text/html" title="Releasing Not Pure Poole v0.1.0" /><published>2022-01-30T14:56:00+09:00</published><updated>2022-01-30T14:56:00+09:00</updated><id>http://localhost:4000/2022/01/30/releasing-not-pure-poole-v0-1-0</id><content type="html" xml:base="http://localhost:4000/2022/01/30/releasing-not-pure-poole-v0-1-0/">&lt;p&gt;The Jekyll theme &lt;strong&gt;Not Pure Poole&lt;/strong&gt; v0.1.0 was released!&lt;/p&gt;

&lt;p&gt;Not Pure Poole is a simple, beautiful, and powerful Jekyll theme for blogs. It is built on &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole&lt;/a&gt; and &lt;a href=&quot;https://purecss.io/&quot;&gt;Pure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information about this theme, you can read the &lt;a href=&quot;https://github.com/vszhub/not-pure-poole/blob/master/README.md&quot;&gt;README&lt;/a&gt; file.&lt;/p&gt;</content><author><name>Songzi Vong</name></author><category term="jekyll theme" /><category term="jekyll" /><summary type="html">The Jekyll theme Not Pure Poole v0.1.0 was released!</summary></entry><entry><title type="html">Welcome to Not Pure Poole</title><link href="http://localhost:4000/2022/01/11/welcome-to-not-pure-poole/" rel="alternate" type="text/html" title="Welcome to Not Pure Poole" /><published>2022-01-11T00:18:00+09:00</published><updated>2022-01-11T00:18:00+09:00</updated><id>http://localhost:4000/2022/01/11/welcome-to-not-pure-poole</id><content type="html" xml:base="http://localhost:4000/2022/01/11/welcome-to-not-pure-poole/">&lt;p class=&quot;message&quot;&gt;Welcome to &lt;strong&gt;Not Pure Poole&lt;/strong&gt;! This is an example post to show the layout.&lt;/p&gt;

&lt;p&gt;First, do you notice the TOC on the right side? Try to scroll down to read this post, you’ll find that the TOC is always sticky in the viewport.&lt;/p&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;mark&gt;To highlight&lt;/mark&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;mark&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark Otto&lt;/cite&gt;, should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;Footnotes are supported as part of the Markdown syntax. Here’s one in action. Clicking this number&lt;sup id=&quot;fnref:fn-sample_footnote&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fn-sample_footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; will lead you to a footnote. The syntax looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Clicking this number[^fn-sample_footnote]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each footnote needs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^fn-&lt;/code&gt; prefix and a unique ID to be referenced for the footnoted content. The syntax for that list looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[^fn-sample_footnote]: Handy! Now click the return link to go back.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can place the footnoted content wherever you like. Markdown parsers should properly place it at the bottom of the post.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Inline code is available with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt; element. Snippets of multiple lines of code are supported through Rouge. Longer lines will automatically scroll horizontally when needed. You may also use code fencing (triple backticks) for rendering code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may also optionally show code snippets with line numbers. Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linenos&lt;/code&gt; to the Rouge tags.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Quisque consequat sapien eget quam rhoncus, sit amet laoreet diam tempus. Aliquam aliquam metus erat, a pulvinar turpis suscipit at.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://placehold.it/800x400&quot; alt=&quot;placeholder&quot; title=&quot;Large example image&quot; /&gt;
&lt;img src=&quot;http://placehold.it/400x200&quot; alt=&quot;placeholder&quot; title=&quot;Medium example image&quot; /&gt;
&lt;img src=&quot;http://placehold.it/200x200&quot; alt=&quot;placeholder&quot; title=&quot;Small example image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Align to the center by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class=&quot;align-center&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://placehold.it/400x200&quot; alt=&quot;placeholder&quot; title=&quot;Medium example image&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/vszhub/not-pure-poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn-sample_footnote&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Handy! Now click the return link to go back. &lt;a href=&quot;#fnref:fn-sample_footnote&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>KJ Choi</name><email>choikj0903@gmail.com</email></author><category term="jekyll theme" /><category term="jekyll" /><category term="tutorial" /><summary type="html">Welcome to Not Pure Poole! This is an example post to show the layout.</summary></entry></feed>